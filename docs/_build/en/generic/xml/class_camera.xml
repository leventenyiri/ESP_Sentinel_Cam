<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_camera" kind="class" language="C++" prot="public">
    <compoundname>Camera</compoundname>
    <includes refid="camera_8h" local="no">camera.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_camera_1a7131f96348b49305f1fba3c6ad9d9550" prot="private" static="no" mutable="no">
        <type>camera_config_t</type>
        <definition>camera_config_t Camera::_config</definition>
        <argsstring></argsstring>
        <name>_config</name>
        <qualifiedname>Camera::_config</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Config variable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/test/test/components/camera/include/camera.h" line="77" column="19" bodyfile="C:/test/test/components/camera/include/camera.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_camera_1ac3a6eef0855495d541b2e8a60259d58c" prot="private" static="no" mutable="no">
        <type>camera_fb_t *</type>
        <definition>camera_fb_t* Camera::_fb</definition>
        <argsstring></argsstring>
        <name>_fb</name>
        <qualifiedname>Camera::_fb</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Frame buffer </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/test/test/components/camera/include/camera.h" line="78" column="15" bodyfile="C:/test/test/components/camera/include/camera.h" bodystart="78" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_camera_1a01f94c3543f56ede7af49dc778f19331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Camera::Camera</definition>
        <argsstring>()</argsstring>
        <name>Camera</name>
        <qualifiedname>Camera::Camera</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/test/test/components/camera/include/camera.h" line="26" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_camera_1ad1897942d0ccf91052386388a497349f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Camera::~Camera</definition>
        <argsstring>()</argsstring>
        <name>~Camera</name>
        <qualifiedname>Camera::~Camera</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/test/test/components/camera/include/camera.h" line="27" column="3" bodyfile="C:/test/test/components/camera/include/camera.h" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="class_camera_1a80b419f1102e21b82d9af1fd3de5c5b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t Camera::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <qualifiedname>Camera::start</qualifiedname>
        <briefdescription>
<para>Starts the camera. </para>
        </briefdescription>
        <detaileddescription>
<para>A more indepth description could be added here if needed.</para>
<para><simplesect kind="return"><para><itemizedlist>
<listitem><para>ESP_OK : camera initialized successfully</para>
</listitem><listitem><para>ESP_FAIL : couldn&apos;t initialize camera</para>
</listitem><listitem><para>ESP_ERR_NOT_SUPPORTED : JPEG format not supported on this sensor </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/test/test/components/camera/include/camera.h" line="42" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_camera_1a419d00aae7f10718037a0b6ceeea5886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t Camera::take_image</definition>
        <argsstring>()</argsstring>
        <name>take_image</name>
        <qualifiedname>Camera::take_image</qualifiedname>
        <briefdescription>
<para>Takes image. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><itemizedlist>
<listitem><para>ESP_OK : captured image</para>
</listitem><listitem><para>ESP_FAIL : couldn&apos;t take image </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/test/test/components/camera/include/camera.h" line="51" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_camera_1a6c86148ed08829c37cc41663b3e64558" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * Camera::get_image_data</definition>
        <argsstring>()</argsstring>
        <name>get_image_data</name>
        <qualifiedname>Camera::get_image_data</qualifiedname>
        <briefdescription>
<para>Gets the contents of the frame buffer of the captured image. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><itemizedlist>
<listitem><para>Frame buffer. In case of failure it returns a nullptr. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/test/test/components/camera/include/camera.h" line="59" column="14" bodyfile="C:/test/test/components/camera/include/camera.h" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_camera_1a1bb5dcbd3726be5e8c2ab117210df450" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Camera::get_image_size</definition>
        <argsstring>()</argsstring>
        <name>get_image_size</name>
        <qualifiedname>Camera::get_image_size</qualifiedname>
        <briefdescription>
<para>Gets image size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><itemizedlist>
<listitem><para>The size of the frame buffer. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/test/test/components/camera/include/camera.h" line="69" column="10" bodyfile="C:/test/test/components/camera/include/camera.h" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_camera_1a934e6aec49b59a6f85e821f472a34ed6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Camera::return_fb</definition>
        <argsstring>()</argsstring>
        <name>return_fb</name>
        <qualifiedname>Camera::return_fb</qualifiedname>
        <briefdescription>
<para>Returns the frame buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/test/test/components/camera/include/camera.h" line="74" column="8" bodyfile="C:/test/test/components/camera/include/camera.h" bodystart="74" bodyend="74"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Handles the camera. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/test/test/components/camera/include/camera.h" line="24" column="1" bodyfile="C:/test/test/components/camera/include/camera.h" bodystart="24" bodyend="79"/>
    <listofallmembers>
      <member refid="class_camera_1a7131f96348b49305f1fba3c6ad9d9550" prot="private" virt="non-virtual"><scope>Camera</scope><name>_config</name></member>
      <member refid="class_camera_1ac3a6eef0855495d541b2e8a60259d58c" prot="private" virt="non-virtual"><scope>Camera</scope><name>_fb</name></member>
      <member refid="class_camera_1a01f94c3543f56ede7af49dc778f19331" prot="public" virt="non-virtual"><scope>Camera</scope><name>Camera</name></member>
      <member refid="class_camera_1a6c86148ed08829c37cc41663b3e64558" prot="public" virt="non-virtual"><scope>Camera</scope><name>get_image_data</name></member>
      <member refid="class_camera_1a1bb5dcbd3726be5e8c2ab117210df450" prot="public" virt="non-virtual"><scope>Camera</scope><name>get_image_size</name></member>
      <member refid="class_camera_1a934e6aec49b59a6f85e821f472a34ed6" prot="public" virt="non-virtual"><scope>Camera</scope><name>return_fb</name></member>
      <member refid="class_camera_1a80b419f1102e21b82d9af1fd3de5c5b1" prot="public" virt="non-virtual"><scope>Camera</scope><name>start</name></member>
      <member refid="class_camera_1a419d00aae7f10718037a0b6ceeea5886" prot="public" virt="non-virtual"><scope>Camera</scope><name>take_image</name></member>
      <member refid="class_camera_1ad1897942d0ccf91052386388a497349f" prot="public" virt="non-virtual"><scope>Camera</scope><name>~Camera</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
